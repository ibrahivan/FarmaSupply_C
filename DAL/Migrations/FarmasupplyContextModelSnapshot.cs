// <auto-generated />
using System;
using DAL.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(FarmasupplyContext))]
    partial class FarmasupplyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("CatalogoProductoPedido", b =>
                {
                    b.Property<long>("List_Cat_PedIdPedido")
                        .HasColumnType("bigint");

                    b.Property<long>("List_Ped_CatIdCatalogoProducto")
                        .HasColumnType("bigint");

                    b.HasKey("List_Cat_PedIdPedido", "List_Ped_CatIdCatalogoProducto");

                    b.HasIndex("List_Ped_CatIdCatalogoProducto");

                    b.ToTable("CatalogoProductoPedido", "fs_logica");
                });

            modelBuilder.Entity("DAL.Entidades.CatalogoProducto", b =>
                {
                    b.Property<long>("IdCatalogoProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_catalogo_producto");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("IdCatalogoProducto"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_producto");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_producto");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_producto");

                    b.Property<int>("PrecioUnitario")
                        .HasColumnType("integer")
                        .HasColumnName("precio_unitario_producto");

                    b.HasKey("IdCatalogoProducto");

                    b.ToTable("catalogoProductos", "fs_logica");
                });

            modelBuilder.Entity("DAL.Entidades.Pedido", b =>
                {
                    b.Property<long>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_pedido");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("IdPedido"));

                    b.Property<int>("PrecioPedido")
                        .HasColumnType("integer")
                        .HasColumnName("precio_pedido");

                    b.Property<long>("id_tienda")
                        .HasColumnType("bigint");

                    b.HasKey("IdPedido");

                    b.HasIndex("id_tienda");

                    b.ToTable("pedidos", "fs_logica");
                });

            modelBuilder.Entity("DAL.Entidades.Tienda", b =>
                {
                    b.Property<long>("IdTienda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_tienda");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("IdTienda"));

                    b.Property<string>("CodigopostalTienda")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("codigopostal_tienda");

                    b.Property<string>("DireccionTienda")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("direccion_tienda");

                    b.Property<long?>("IdUsuarioPropietario")
                        .HasMaxLength(70)
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario_propietario");

                    b.Property<long?>("IdUsuarioPropietarioNavigationIdUsuario")
                        .HasColumnType("bigint");

                    b.Property<string>("NombreTienda")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("nombre_tienda");

                    b.HasKey("IdTienda");

                    b.HasIndex("IdUsuarioPropietarioNavigationIdUsuario");

                    b.ToTable("tiendas", "fs_logica");
                });

            modelBuilder.Entity("DAL.Entidades.Usuario", b =>
                {
                    b.Property<long>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("IdUsuario"));

                    b.Property<string>("ApellidosUsuario")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("apellidos_usuario");

                    b.Property<string>("ClaveUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("clave_usuario");

                    b.Property<bool>("CuentaConfirmada")
                        .HasColumnType("boolean")
                        .HasColumnName("cuenta_confirmada");

                    b.Property<string>("DniUsuario")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("dni_usuario");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_usuario");

                    b.Property<DateTime?>("ExpiracionToken")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("bytea")
                        .HasColumnName("foto_usuario");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("nombre_usuario");

                    b.Property<string>("Rol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rol_usuario");

                    b.Property<string>("TlfUsuario")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("tlf_usuario");

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("token_recuperacion");

                    b.HasKey("IdUsuario");

                    b.ToTable("usuarios", "fs_gestion");
                });

            modelBuilder.Entity("CatalogoProductoPedido", b =>
                {
                    b.HasOne("DAL.Entidades.Pedido", null)
                        .WithMany()
                        .HasForeignKey("List_Cat_PedIdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entidades.CatalogoProducto", null)
                        .WithMany()
                        .HasForeignKey("List_Ped_CatIdCatalogoProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entidades.Pedido", b =>
                {
                    b.HasOne("DAL.Entidades.Tienda", "IdPedido_Tie")
                        .WithMany("List_Tie_Ped")
                        .HasForeignKey("id_tienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPedido_Tie");
                });

            modelBuilder.Entity("DAL.Entidades.Tienda", b =>
                {
                    b.HasOne("DAL.Entidades.Usuario", "IdUsuarioPropietarioNavigation")
                        .WithMany("Tiendas")
                        .HasForeignKey("IdUsuarioPropietarioNavigationIdUsuario");

                    b.Navigation("IdUsuarioPropietarioNavigation");
                });

            modelBuilder.Entity("DAL.Entidades.Tienda", b =>
                {
                    b.Navigation("List_Tie_Ped");
                });

            modelBuilder.Entity("DAL.Entidades.Usuario", b =>
                {
                    b.Navigation("Tiendas");
                });
#pragma warning restore 612, 618
        }
    }
}
